/************************************************
 喷漆机用程序
 别搞事情
 很高级的！！
************************************************/


#include "led.h"
#include "delay.h"
#include "key.h"
#include "sys.h"
#include "usart.h"
#include "timer.h"
#include "math.h"
#include "stdbool.h"
#include "pqj.h"


//中断间隔= （ARR+1)(PSC+1)/Tclk  Tclk=72M
#define Time_delay_arr 99
#define Time_delay_psc 7199

//串口波特率设置
#define UART1_bit 115200



/*************************

	喷浆机的基本设置
	长度默认单位：mm
	速度默认单位：mm/s
	时间默认单位：s

*************************/

//喷浆机流水线速度
#define pjj_speed 10
//喷浆机扫描分辨率
#define pjj_Scanning_speed 10



//扫描区 通道数
const int smq_Number = 14;
//扫描区 通道间隔 （每一个扫描点之间的距离）
#define smq_interval 30
//扫描区 通道总长（第一通道到最后通道间隔）
#define smq_Total_interval 0
//扫描区 总长度（最好设置为8和10的公倍数）
const int smq_long = 2000;
//扫描区 总宽
#define smq_wide 0
//扫描区 分辨率 单位：每厘米	（设置太小CPU可能会炸）
const int smq_ResolvingPpower = 10;


//喷盘	半径
#define pp_R 300
//喷盘	喷枪数
#define pp_Number 6
//喷盘	x轴位置偏移
#define pp_x 1500
//喷盘	y轴位置偏移 （中心点默认为扫描区中点）
#define pp_y 0



/************************************************
	全局变量申明区
************************************************/
//喷盘通道	左定点位置	x,y
int pp_life[16][2];
//喷盘通道	右定点位置	x,y
int pp_right[16][2];
//喷盘的周长
int pp_C;
//喷盘上的定点的斜率
double pp_K[16];
//喷盘计时器
int pp_timer[6][2];

//扫描区通道位置	y;
int smq_tongdao_y[smq_Number];
//扫描分块后每一块的长度
double smk_long = 1;
//扫描分块数
int smk_Number = 0;

//扫描块
u8 smk[14][300];
//扫描块区间，记录定点落在哪个区间上
int smk_qvjian[16][2];

//扫描计次	时钟中断多少次后算作扫描一次
int smk_timer;//不变
int smk_timer_Num;//应万变
//扫描列计数
int smk_Columns_Num_max = smq_long/10*smq_ResolvingPpower/8;
int smk_Columns_Num = 0;

//输入捕获用
u32 temp=0;
u32 temp2=0;
u32 jsd=0;
u32 jsd2=0;
u16 mcs=0;
u16 mcs2=0;


//全局错误代码
int Error_Code = 0;


/************************************************
	全局变量引用区
************************************************/
extern bool saomiao_switch;
//函数的耗时计算
extern int TIME_scanning_time;


extern u8 TIM5CH1_CAPTURE_STA;
extern u16 TIM5CH1_CAPTURE_VAL;

extern u8 TIM4CH1_CAPTURE_STA;
extern u16 TIM4CH1_CAPTURE_VAL;

/************************************************
	函数申明区
************************************************/
void Numerical_value_Init(void);//初始化相关数值
void printf_Error(void);
void buhuo(void);


int main(void)
{

    delay_init();	    	 //延时函数初始化
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); //设置NVIC中断分组2:2位抢占优先级，2位响应优先级
    uart_init(UART1_bit);	 //串口初始化为115200
	GM_Init();//光敏端口初始化
	HW_Init();//红外端口初始化
	TIM_Cap_Init(0XFFFF,72-1);//输入捕获时钟初始化
    TIM3_Int_Init(Time_delay_arr,Time_delay_psc);//10Khz的计数频率，计数到100为1ms  中断间隔 = （ARR+1)(PSC+1)/Tclk（秒）  Tclk=72M
	TIM2_Int_Init(9,Time_delay_psc);//1ms触发一次
	Numerical_value_Init();//数值初始化



    while(1)
    {
		
		
			//if(saomiao_switch) TIME_scanning();
		buhuo();
		
    }


}


void buhuo(void){

	if(TIM5CH1_CAPTURE_STA&0X80)
		 {
			 mcs++;
		if(mcs==360) mcs=1;
		printf("当前脉冲:%d 次\r\n",mcs);
			 temp=TIM5CH1_CAPTURE_STA&0X3F;
					 temp*=65536;
			 temp+=TIM5CH1_CAPTURE_VAL;
			 //temp=temp/500;
			 if(temp<1)temp=1;
			 printf("HIG:%d ms\r\n",2*temp);
			 //if(mcs==360) zsj=zsj+temp;
			 jsd=1/(temp*0.001);
			 printf("jsd:%d rad/s\r\n",jsd);
			 TIM5CH1_CAPTURE_STA=0;
		 
		 }
		 
		 if(TIM4CH1_CAPTURE_STA&0X80)
		 {
			 mcs2++;
		if(mcs2==360) mcs2=1;
		printf("当前脉冲2:%d 次\r\n",mcs2);
			 temp2=TIM4CH1_CAPTURE_STA&0X3F;
			 temp2*=65536;
			 temp2+=TIM4CH1_CAPTURE_VAL;
			 //temp2=temp2/500;
			 if(temp2<1)temp2=1;
			 printf("HIG2:%d ms\r\n",2*temp2);
			 //if(mcs2==360) zsj2=zsj2+temp2;
			 jsd2=1/(temp2*0.001);
			 printf("jsd2:%d rad/s\r\n",jsd2);
			 TIM4CH1_CAPTURE_STA=0;
		 
		 }
		  
	 }		 



void Numerical_value_Init(void) {

    int i,j;
	
	
	//首先初始化数组
	for(i=0;i<smq_Number;i++){
		for(j=0;j<smk_Columns_Num_max;j++){
			smk[i][j] = 0;
		}
	}
	
	printf("列数：%d\r\n",smk_Columns_Num_max);
	

    //计算通道y轴偏移位置
    if(smq_Number%2==0) { //通道数为偶
        int data = smq_interval/2;
        int Num =smq_Number/2;

        for(i=0; i<Num; i++) {
            smq_tongdao_y[i] = -(data+(Num-i-1)*smq_interval);
			
			printf("tongdao%d:%d\r\n",i,smq_tongdao_y[i]);
        }

        for(; i<smq_Number; i++) {
            smq_tongdao_y[i] = data+(i-Num)*smq_interval;
			
			printf("tongdao%d:%d\r\n",i,smq_tongdao_y[i]);
        }
    } else { //通道数为奇



    }
	
	

    //计算通道与喷盘的交点
    for(i=0; i<smq_Number; i++) {


        if(fabs((double)smq_tongdao_y[i]) < pp_R + pp_y) {

            pp_life[i][0] = -(int)(sqrt(pow(pp_R,2) - pow(smq_tongdao_y[i]-pp_y,2)) - pp_x);
            pp_life[i][1] = smq_tongdao_y[i];

            pp_right[i][0] = (int)(sqrt(pow(pp_R,2) - pow(smq_tongdao_y[i]-pp_y,2)) + pp_x);
            pp_right[i][1] = pp_life[i][1];
			
			printf("jiaod%d:L:%d,%d;R:%d,%d;\r\n",i,pp_life[i][0],pp_life[i][1],pp_right[i][0],pp_right[i][1]);

        } else {

            pp_life[i][0] = pp_right[i][0] = 0;
            pp_life[i][1] = pp_right[i][1] = smq_tongdao_y[i];

			printf("jiaod%d:L:%d,%d;R:%d,%d;\r\n",i,pp_life[i][0],pp_life[i][1],pp_right[i][0],pp_right[i][1]);
        }
    }


	//扫描区分块长度
	smk_long = smq_long/(smq_long/10*smq_ResolvingPpower/8);
	smk_Number = smq_long/10*smq_ResolvingPpower/8;

	//判断定点所处分区,
	for(i=0; i<smq_Number; i++){
		if(pp_life[0]!=0){
			
			smk_qvjian[i][0] = (pp_life[i][0]/smk_long) + 1;
			smk_qvjian[i][1] = (pp_right[i][0]/smk_long) + 1;
			
			printf("qvj%d:L:%d,R:%d\r\n",i,smk_qvjian[i][0],smk_qvjian[i][1]);
			
		}else{
			smk_qvjian[i][0] = smk_qvjian[i][1]=0;
			
			printf("qvj%d:L:%d,R:%d\r\n",i,smk_qvjian[i][0],smk_qvjian[i][1]);
		}
	}
	
	
	//计次扫描数
	smk_timer = 1 /( pjj_speed / smk_long) / (0.01);//0.01是中断间隔
	smk_timer_Num = smk_timer;
	
	printf("timer:%d\r\n",smk_timer_Num);
	
	//计算喷盘的周长
	pp_C = 2 * 3.1415 * pp_R;
	
	//计算直线的夹角
	
	for(i=0;i<smq_Number;i++){
		pp_K[i]=((double)pp_life[i][1]-pp_y)/((double)pp_life[i][0]-pp_x);
		
		printf("K%d:%lf\r\n",i,pp_K[i]);
	}
	
	
	
}


void printf_Error(void) {

    if(Error_Code) {
        switch(Error_Code) {

        case 1:

            break;

        case 2:

            break;

        case 3:

            break;

        case 4:

            break;

        case 5:

            break;

        case 6:

            break;

        }

        printf("\r\n--------------Error output: %d--------------\r\n",Error_Code);
        LED0 = 0;
    } else LED0 = 1;



}

